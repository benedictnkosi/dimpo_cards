package expo.modules.updates.db

import androidx.room.DatabaseConfiguration
import androidx.room.InvalidationTracker
import androidx.room.RoomDatabase
import androidx.room.RoomOpenHelper
import androidx.room.migration.AutoMigrationSpec
import androidx.room.migration.Migration
import androidx.room.util.TableInfo
import androidx.room.util.TableInfo.Companion.read
import androidx.room.util.dropFtsSyncTriggers
import androidx.sqlite.db.SupportSQLiteDatabase
import androidx.sqlite.db.SupportSQLiteOpenHelper
import expo.modules.updates.db.dao.AssetDao
import expo.modules.updates.db.dao.AssetDao_Impl
import expo.modules.updates.db.dao.JSONDataDao
import expo.modules.updates.db.dao.JSONDataDao_Impl
import expo.modules.updates.db.dao.UpdateDao
import expo.modules.updates.db.dao.UpdateDao_Impl
import java.lang.Class
import java.util.ArrayList
import java.util.HashMap
import java.util.HashSet
import javax.`annotation`.processing.Generated
import kotlin.Any
import kotlin.Boolean
import kotlin.Lazy
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.collections.MutableList
import kotlin.collections.Set

@Generated(value = ["androidx.room.RoomProcessor"])
@Suppress(names = ["UNCHECKED_CAST", "DEPRECATION", "REDUNDANT_PROJECTION"])
public class UpdatesDatabase_Impl : UpdatesDatabase() {
  private val _updateDao: Lazy<UpdateDao> = lazy {
    UpdateDao_Impl(this)
  }


  private val _assetDao: Lazy<AssetDao> = lazy {
    AssetDao_Impl(this)
  }


  private val _jSONDataDao: Lazy<JSONDataDao> = lazy {
    JSONDataDao_Impl(this)
  }


  protected override fun createOpenHelper(config: DatabaseConfiguration): SupportSQLiteOpenHelper {
    val _openCallback: SupportSQLiteOpenHelper.Callback = RoomOpenHelper(config, object :
        RoomOpenHelper.Delegate(12) {
      public override fun createAllTables(db: SupportSQLiteDatabase) {
        db.execSQL("CREATE TABLE IF NOT EXISTS `updates` (`id` BLOB NOT NULL, `commit_time` INTEGER NOT NULL, `runtime_version` TEXT NOT NULL, `scope_key` TEXT NOT NULL, `manifest` TEXT NOT NULL, `launch_asset_id` INTEGER, `status` INTEGER NOT NULL, `keep` INTEGER NOT NULL, `last_accessed` INTEGER NOT NULL, `successful_launch_count` INTEGER NOT NULL DEFAULT 0, `failed_launch_count` INTEGER NOT NULL DEFAULT 0, PRIMARY KEY(`id`), FOREIGN KEY(`launch_asset_id`) REFERENCES `assets`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE INDEX IF NOT EXISTS `index_updates_launch_asset_id` ON `updates` (`launch_asset_id`)")
        db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_updates_scope_key_commit_time` ON `updates` (`scope_key`, `commit_time`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `updates_assets` (`update_id` BLOB NOT NULL, `asset_id` INTEGER NOT NULL, PRIMARY KEY(`update_id`, `asset_id`), FOREIGN KEY(`update_id`) REFERENCES `updates`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`asset_id`) REFERENCES `assets`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE INDEX IF NOT EXISTS `index_updates_assets_asset_id` ON `updates_assets` (`asset_id`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `assets` (`key` TEXT, `type` TEXT, `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `url` TEXT, `headers` TEXT, `extra_request_headers` TEXT, `metadata` TEXT, `download_time` INTEGER, `relative_path` TEXT, `hash` BLOB, `hash_type` INTEGER NOT NULL, `expected_hash` TEXT, `marked_for_deletion` INTEGER NOT NULL)")
        db.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_assets_key` ON `assets` (`key`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `json_data` (`key` TEXT NOT NULL, `value` TEXT NOT NULL, `last_updated` INTEGER NOT NULL, `scope_key` TEXT NOT NULL, `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL)")
        db.execSQL("CREATE INDEX IF NOT EXISTS `index_json_data_scope_key` ON `json_data` (`scope_key`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)")
        db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '472340246d291854f67ce4b51e48fb0b')")
      }

      public override fun dropAllTables(db: SupportSQLiteDatabase) {
        db.execSQL("DROP TABLE IF EXISTS `updates`")
        db.execSQL("DROP TABLE IF EXISTS `updates_assets`")
        db.execSQL("DROP TABLE IF EXISTS `assets`")
        db.execSQL("DROP TABLE IF EXISTS `json_data`")
        val _callbacks: List<RoomDatabase.Callback>? = mCallbacks
        if (_callbacks != null) {
          for (_callback: RoomDatabase.Callback in _callbacks) {
            _callback.onDestructiveMigration(db)
          }
        }
      }

      public override fun onCreate(db: SupportSQLiteDatabase) {
        val _callbacks: List<RoomDatabase.Callback>? = mCallbacks
        if (_callbacks != null) {
          for (_callback: RoomDatabase.Callback in _callbacks) {
            _callback.onCreate(db)
          }
        }
      }

      public override fun onOpen(db: SupportSQLiteDatabase) {
        mDatabase = db
        db.execSQL("PRAGMA foreign_keys = ON")
        internalInitInvalidationTracker(db)
        val _callbacks: List<RoomDatabase.Callback>? = mCallbacks
        if (_callbacks != null) {
          for (_callback: RoomDatabase.Callback in _callbacks) {
            _callback.onOpen(db)
          }
        }
      }

      public override fun onPreMigrate(db: SupportSQLiteDatabase) {
        dropFtsSyncTriggers(db)
      }

      public override fun onPostMigrate(db: SupportSQLiteDatabase) {
      }

      public override fun onValidateSchema(db: SupportSQLiteDatabase):
          RoomOpenHelper.ValidationResult {
        val _columnsUpdates: HashMap<String, TableInfo.Column> =
            HashMap<String, TableInfo.Column>(11)
        _columnsUpdates.put("id", TableInfo.Column("id", "BLOB", true, 1, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("commit_time", TableInfo.Column("commit_time", "INTEGER", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("runtime_version", TableInfo.Column("runtime_version", "TEXT", true, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("scope_key", TableInfo.Column("scope_key", "TEXT", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("manifest", TableInfo.Column("manifest", "TEXT", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("launch_asset_id", TableInfo.Column("launch_asset_id", "INTEGER", false,
            0, null, TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("status", TableInfo.Column("status", "INTEGER", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("keep", TableInfo.Column("keep", "INTEGER", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("last_accessed", TableInfo.Column("last_accessed", "INTEGER", true, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("successful_launch_count", TableInfo.Column("successful_launch_count",
            "INTEGER", true, 0, "0", TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdates.put("failed_launch_count", TableInfo.Column("failed_launch_count",
            "INTEGER", true, 0, "0", TableInfo.CREATED_FROM_ENTITY))
        val _foreignKeysUpdates: HashSet<TableInfo.ForeignKey> = HashSet<TableInfo.ForeignKey>(1)
        _foreignKeysUpdates.add(TableInfo.ForeignKey("assets", "CASCADE", "NO ACTION",
            listOf("launch_asset_id"), listOf("id")))
        val _indicesUpdates: HashSet<TableInfo.Index> = HashSet<TableInfo.Index>(2)
        _indicesUpdates.add(TableInfo.Index("index_updates_launch_asset_id", false,
            listOf("launch_asset_id"), listOf("ASC")))
        _indicesUpdates.add(TableInfo.Index("index_updates_scope_key_commit_time", true,
            listOf("scope_key", "commit_time"), listOf("ASC", "ASC")))
        val _infoUpdates: TableInfo = TableInfo("updates", _columnsUpdates, _foreignKeysUpdates,
            _indicesUpdates)
        val _existingUpdates: TableInfo = read(db, "updates")
        if (!_infoUpdates.equals(_existingUpdates)) {
          return RoomOpenHelper.ValidationResult(false, """
              |updates(expo.modules.updates.db.entity.UpdateEntity).
              | Expected:
              |""".trimMargin() + _infoUpdates + """
              |
              | Found:
              |""".trimMargin() + _existingUpdates)
        }
        val _columnsUpdatesAssets: HashMap<String, TableInfo.Column> =
            HashMap<String, TableInfo.Column>(2)
        _columnsUpdatesAssets.put("update_id", TableInfo.Column("update_id", "BLOB", true, 1, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsUpdatesAssets.put("asset_id", TableInfo.Column("asset_id", "INTEGER", true, 2, null,
            TableInfo.CREATED_FROM_ENTITY))
        val _foreignKeysUpdatesAssets: HashSet<TableInfo.ForeignKey> =
            HashSet<TableInfo.ForeignKey>(2)
        _foreignKeysUpdatesAssets.add(TableInfo.ForeignKey("updates", "CASCADE", "NO ACTION",
            listOf("update_id"), listOf("id")))
        _foreignKeysUpdatesAssets.add(TableInfo.ForeignKey("assets", "CASCADE", "NO ACTION",
            listOf("asset_id"), listOf("id")))
        val _indicesUpdatesAssets: HashSet<TableInfo.Index> = HashSet<TableInfo.Index>(1)
        _indicesUpdatesAssets.add(TableInfo.Index("index_updates_assets_asset_id", false,
            listOf("asset_id"), listOf("ASC")))
        val _infoUpdatesAssets: TableInfo = TableInfo("updates_assets", _columnsUpdatesAssets,
            _foreignKeysUpdatesAssets, _indicesUpdatesAssets)
        val _existingUpdatesAssets: TableInfo = read(db, "updates_assets")
        if (!_infoUpdatesAssets.equals(_existingUpdatesAssets)) {
          return RoomOpenHelper.ValidationResult(false, """
              |updates_assets(expo.modules.updates.db.entity.UpdateAssetEntity).
              | Expected:
              |""".trimMargin() + _infoUpdatesAssets + """
              |
              | Found:
              |""".trimMargin() + _existingUpdatesAssets)
        }
        val _columnsAssets: HashMap<String, TableInfo.Column> =
            HashMap<String, TableInfo.Column>(13)
        _columnsAssets.put("key", TableInfo.Column("key", "TEXT", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("type", TableInfo.Column("type", "TEXT", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("id", TableInfo.Column("id", "INTEGER", true, 1, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("url", TableInfo.Column("url", "TEXT", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("headers", TableInfo.Column("headers", "TEXT", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("extra_request_headers", TableInfo.Column("extra_request_headers",
            "TEXT", false, 0, null, TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("metadata", TableInfo.Column("metadata", "TEXT", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("download_time", TableInfo.Column("download_time", "INTEGER", false, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("relative_path", TableInfo.Column("relative_path", "TEXT", false, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("hash", TableInfo.Column("hash", "BLOB", false, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("hash_type", TableInfo.Column("hash_type", "INTEGER", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("expected_hash", TableInfo.Column("expected_hash", "TEXT", false, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsAssets.put("marked_for_deletion", TableInfo.Column("marked_for_deletion", "INTEGER",
            true, 0, null, TableInfo.CREATED_FROM_ENTITY))
        val _foreignKeysAssets: HashSet<TableInfo.ForeignKey> = HashSet<TableInfo.ForeignKey>(0)
        val _indicesAssets: HashSet<TableInfo.Index> = HashSet<TableInfo.Index>(1)
        _indicesAssets.add(TableInfo.Index("index_assets_key", true, listOf("key"), listOf("ASC")))
        val _infoAssets: TableInfo = TableInfo("assets", _columnsAssets, _foreignKeysAssets,
            _indicesAssets)
        val _existingAssets: TableInfo = read(db, "assets")
        if (!_infoAssets.equals(_existingAssets)) {
          return RoomOpenHelper.ValidationResult(false, """
              |assets(expo.modules.updates.db.entity.AssetEntity).
              | Expected:
              |""".trimMargin() + _infoAssets + """
              |
              | Found:
              |""".trimMargin() + _existingAssets)
        }
        val _columnsJsonData: HashMap<String, TableInfo.Column> =
            HashMap<String, TableInfo.Column>(5)
        _columnsJsonData.put("key", TableInfo.Column("key", "TEXT", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsJsonData.put("value", TableInfo.Column("value", "TEXT", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsJsonData.put("last_updated", TableInfo.Column("last_updated", "INTEGER", true, 0,
            null, TableInfo.CREATED_FROM_ENTITY))
        _columnsJsonData.put("scope_key", TableInfo.Column("scope_key", "TEXT", true, 0, null,
            TableInfo.CREATED_FROM_ENTITY))
        _columnsJsonData.put("id", TableInfo.Column("id", "INTEGER", true, 1, null,
            TableInfo.CREATED_FROM_ENTITY))
        val _foreignKeysJsonData: HashSet<TableInfo.ForeignKey> = HashSet<TableInfo.ForeignKey>(0)
        val _indicesJsonData: HashSet<TableInfo.Index> = HashSet<TableInfo.Index>(1)
        _indicesJsonData.add(TableInfo.Index("index_json_data_scope_key", false,
            listOf("scope_key"), listOf("ASC")))
        val _infoJsonData: TableInfo = TableInfo("json_data", _columnsJsonData,
            _foreignKeysJsonData, _indicesJsonData)
        val _existingJsonData: TableInfo = read(db, "json_data")
        if (!_infoJsonData.equals(_existingJsonData)) {
          return RoomOpenHelper.ValidationResult(false, """
              |json_data(expo.modules.updates.db.entity.JSONDataEntity).
              | Expected:
              |""".trimMargin() + _infoJsonData + """
              |
              | Found:
              |""".trimMargin() + _existingJsonData)
        }
        return RoomOpenHelper.ValidationResult(true, null)
      }
    }, "472340246d291854f67ce4b51e48fb0b", "44e91f336617a878939030a5de33f923")
    val _sqliteConfig: SupportSQLiteOpenHelper.Configuration =
        SupportSQLiteOpenHelper.Configuration.builder(config.context).name(config.name).callback(_openCallback).build()
    val _helper: SupportSQLiteOpenHelper = config.sqliteOpenHelperFactory.create(_sqliteConfig)
    return _helper
  }

  protected override fun createInvalidationTracker(): InvalidationTracker {
    val _shadowTablesMap: HashMap<String, String> = HashMap<String, String>(0)
    val _viewTables: HashMap<String, Set<String>> = HashMap<String, Set<String>>(0)
    return InvalidationTracker(this, _shadowTablesMap, _viewTables,
        "updates","updates_assets","assets","json_data")
  }

  public override fun clearAllTables() {
    super.assertNotMainThread()
    val _db: SupportSQLiteDatabase = super.openHelper.writableDatabase
    val _supportsDeferForeignKeys: Boolean = android.os.Build.VERSION.SDK_INT >=
        android.os.Build.VERSION_CODES.LOLLIPOP
    try {
      if (!_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA foreign_keys = FALSE")
      }
      super.beginTransaction()
      if (_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA defer_foreign_keys = TRUE")
      }
      _db.execSQL("DELETE FROM `updates`")
      _db.execSQL("DELETE FROM `updates_assets`")
      _db.execSQL("DELETE FROM `assets`")
      _db.execSQL("DELETE FROM `json_data`")
      super.setTransactionSuccessful()
    } finally {
      super.endTransaction()
      if (!_supportsDeferForeignKeys) {
        _db.execSQL("PRAGMA foreign_keys = TRUE")
      }
      _db.query("PRAGMA wal_checkpoint(FULL)").close()
      if (!_db.inTransaction()) {
        _db.execSQL("VACUUM")
      }
    }
  }

  protected override fun getRequiredTypeConverters(): Map<Class<out Any>, List<Class<out Any>>> {
    val _typeConvertersMap: HashMap<Class<out Any>, List<Class<out Any>>> =
        HashMap<Class<out Any>, List<Class<out Any>>>()
    _typeConvertersMap.put(UpdateDao::class.java, UpdateDao_Impl.getRequiredConverters())
    _typeConvertersMap.put(AssetDao::class.java, AssetDao_Impl.getRequiredConverters())
    _typeConvertersMap.put(JSONDataDao::class.java, JSONDataDao_Impl.getRequiredConverters())
    return _typeConvertersMap
  }

  public override fun getRequiredAutoMigrationSpecs(): Set<Class<out AutoMigrationSpec>> {
    val _autoMigrationSpecsSet: HashSet<Class<out AutoMigrationSpec>> =
        HashSet<Class<out AutoMigrationSpec>>()
    return _autoMigrationSpecsSet
  }

  public override
      fun getAutoMigrations(autoMigrationSpecs: Map<Class<out AutoMigrationSpec>, AutoMigrationSpec>):
      List<Migration> {
    val _autoMigrations: MutableList<Migration> = ArrayList<Migration>()
    return _autoMigrations
  }

  public override fun updateDao(): UpdateDao = _updateDao.value

  public override fun assetDao(): AssetDao = _assetDao.value

  public override fun jsonDataDao(): JSONDataDao? = _jSONDataDao.value
}
