package expo.modules.image;

/**
 * Glide uses `hashCode` and `equals` of the `DownsampleStrategy` to calculate the cache key.
 * However, we generate this object dynamically, which means that each instance will be different.
 * Unfortunately, this behaviour is not correct since Glide will not load
 * the image from memory no matter what.
 * To fix this issue, we set the `hashCode` to a fixed number and
 * override `equals` to only check if objects have the common type.
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u001e\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\b\n\u0000\b&\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0013\u0010\u0003\u001a\u00020\u00042\b\u0010\u0005\u001a\u0004\u0018\u00010\u0006H\u0096\u0002J\b\u0010\u0007\u001a\u00020\bH\u0016\u00a8\u0006\t"}, d2 = {"Lexpo/modules/image/CustomDownsampleStrategy;", "Lcom/bumptech/glide/load/resource/bitmap/DownsampleStrategy;", "()V", "equals", "", "other", "", "hashCode", "", "expo-image_debug"})
public abstract class CustomDownsampleStrategy extends com.bumptech.glide.load.resource.bitmap.DownsampleStrategy {
    
    public CustomDownsampleStrategy() {
        super();
    }
    
    @java.lang.Override()
    public boolean equals(@org.jetbrains.annotations.Nullable()
    java.lang.Object other) {
        return false;
    }
    
    @java.lang.Override()
    public int hashCode() {
        return 0;
    }
}