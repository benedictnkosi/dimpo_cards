package expo.modules.image.svg;

/**
 * We have to use the intrinsicWidth/Height from the Picture to render the image at a high enough resolution, but at the same time we want to return the actual
 * preferred width and height of the SVG to JS. This class allows us to do that.
 */
@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0002\b\u0006\u0018\u00002\u00020\u0001B\u001d\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0005\u00a2\u0006\u0002\u0010\u0007R\u0011\u0010\u0006\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\b\u0010\tR\u0011\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\b\n\u0000\u001a\u0004\b\n\u0010\t\u00a8\u0006\u000b"}, d2 = {"Lexpo/modules/image/svg/SVGPictureDrawable;", "Landroid/graphics/drawable/PictureDrawable;", "picture", "Landroid/graphics/Picture;", "svgIntrinsicWidth", "", "svgIntrinsicHeight", "(Landroid/graphics/Picture;II)V", "getSvgIntrinsicHeight", "()I", "getSvgIntrinsicWidth", "expo-image_debug"})
public final class SVGPictureDrawable extends android.graphics.drawable.PictureDrawable {
    private final int svgIntrinsicWidth = 0;
    private final int svgIntrinsicHeight = 0;
    
    public SVGPictureDrawable(@org.jetbrains.annotations.NotNull()
    android.graphics.Picture picture, int svgIntrinsicWidth, int svgIntrinsicHeight) {
        super(null);
    }
    
    public final int getSvgIntrinsicWidth() {
        return 0;
    }
    
    public final int getSvgIntrinsicHeight() {
        return 0;
    }
}