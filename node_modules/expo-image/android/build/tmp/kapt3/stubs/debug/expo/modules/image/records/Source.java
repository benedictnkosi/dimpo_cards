package expo.modules.image.records;

@kotlin.Metadata(mv = {1, 9, 0}, k = 1, xi = 48, d1 = {"\u0000:\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u0006\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000b\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\bv\u0018\u00002\u00020\u0001J\u0012\u0010\u000e\u001a\u0004\u0018\u00010\u000f2\u0006\u0010\u0010\u001a\u00020\u0011H&J\u0010\u0010\u0012\u001a\u00020\u00132\u0006\u0010\u0010\u001a\u00020\u0011H&J\b\u0010\u0014\u001a\u00020\u0015H\u0016R\u0012\u0010\u0002\u001a\u00020\u0003X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0004\u0010\u0005R\u0014\u0010\u0006\u001a\u00020\u00078VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\b\u0010\tR\u0012\u0010\n\u001a\u00020\u0007X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\u000b\u0010\tR\u0012\u0010\f\u001a\u00020\u0003X\u00a6\u0004\u00a2\u0006\u0006\u001a\u0004\b\r\u0010\u0005\u0082\u0001\u0002\u0016\u0017\u00a8\u0006\u0018"}, d2 = {"Lexpo/modules/image/records/Source;", "", "height", "", "getHeight", "()I", "pixelCount", "", "getPixelCount", "()D", "scale", "getScale", "width", "getWidth", "createGlideModelProvider", "Lexpo/modules/image/GlideModelProvider;", "context", "Landroid/content/Context;", "createGlideOptions", "Lcom/bumptech/glide/request/RequestOptions;", "usesPlaceholderContentFit", "", "Lexpo/modules/image/records/DecodedSource;", "Lexpo/modules/image/records/SourceMap;", "expo-image_debug"})
public abstract interface Source {
    
    public abstract int getWidth();
    
    public abstract int getHeight();
    
    public abstract double getScale();
    
    public abstract double getPixelCount();
    
    @org.jetbrains.annotations.Nullable()
    public abstract expo.modules.image.GlideModelProvider createGlideModelProvider(@org.jetbrains.annotations.NotNull()
    android.content.Context context);
    
    @org.jetbrains.annotations.NotNull()
    public abstract com.bumptech.glide.request.RequestOptions createGlideOptions(@org.jetbrains.annotations.NotNull()
    android.content.Context context);
    
    /**
     * Whether it should use placeholder content fit when used as a placeholder
     */
    public abstract boolean usesPlaceholderContentFit();
    
    @kotlin.Metadata(mv = {1, 9, 0}, k = 3, xi = 48)
    public static final class DefaultImpls {
        
        public static double getPixelCount(@org.jetbrains.annotations.NotNull()
        expo.modules.image.records.Source $this) {
            return 0.0;
        }
        
        /**
         * Whether it should use placeholder content fit when used as a placeholder
         */
        public static boolean usesPlaceholderContentFit(@org.jetbrains.annotations.NotNull()
        expo.modules.image.records.Source $this) {
            return false;
        }
    }
}